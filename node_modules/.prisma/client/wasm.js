
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  demoBalance: 'demoBalance',
  realBalance: 'realBalance',
  totalDeposits: 'totalDeposits',
  totalWithdrawals: 'totalWithdrawals',
  totalTrades: 'totalTrades',
  totalWins: 'totalWins',
  totalLosses: 'totalLosses',
  currentAccount: 'currentAccount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  asset: 'asset',
  direction: 'direction',
  amount: 'amount',
  duration: 'duration',
  startPrice: 'startPrice',
  endPrice: 'endPrice',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  result: 'result',
  payout: 'payout',
  accountType: 'accountType',
  createdAt: 'createdAt'
};

exports.Prisma.DepositScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  utr: 'utr',
  status: 'status',
  method: 'method',
  createdAt: 'createdAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  accountHolder: 'accountHolder',
  status: 'status',
  createdAt: 'createdAt',
  processedAt: 'processedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category',
  subject: 'subject',
  message: 'message',
  status: 'status',
  priority: 'priority',
  responses: 'responses',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminSettingsScalarFieldEnum = {
  id: 'id',
  defaultPayout: 'defaultPayout',
  maxTradeAmount: 'maxTradeAmount',
  minTradeAmount: 'minTradeAmount',
  minDeposit: 'minDeposit',
  minWithdrawal: 'minWithdrawal',
  serverStatus: 'serverStatus',
  tradeMode: 'tradeMode',
  qrCode: 'qrCode',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Trade: 'Trade',
  Deposit: 'Deposit',
  Withdrawal: 'Withdrawal',
  Ticket: 'Ticket',
  AdminSettings: 'AdminSettings'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\vinod\\OneDrive\\Desktop\\tradig\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\vinod\\OneDrive\\Desktop\\tradig\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": null,
        "value": "file:./dev.db"
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\nmodel User {\n  id               String   @id @default(cuid())\n  username         String   @unique\n  email            String?\n  demoBalance      Float    @default(50000)\n  realBalance      Float    @default(0)\n  totalDeposits    Float    @default(0)\n  totalWithdrawals Float    @default(0)\n  totalTrades      Int      @default(0)\n  totalWins        Int      @default(0)\n  totalLosses      Int      @default(0)\n  currentAccount   String   @default(\"demo\")\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  trades      Trade[]\n  deposits    Deposit[]\n  withdrawals Withdrawal[]\n  tickets     Ticket[]\n\n  @@map(\"users\")\n}\n\nmodel Trade {\n  id          String   @id @default(cuid())\n  userId      String\n  asset       String\n  direction   String\n  amount      Float\n  duration    Int\n  startPrice  Float\n  endPrice    Float?\n  startTime   DateTime @default(now())\n  endTime     DateTime\n  status      String   @default(\"active\")\n  result      String?\n  payout      Float?\n  accountType String   @default(\"demo\")\n  createdAt   DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"trades\")\n}\n\nmodel Deposit {\n  id         String    @id @default(cuid())\n  userId     String\n  amount     Float\n  utr        String?\n  status     String    @default(\"pending\")\n  method     String    @default(\"upi\")\n  createdAt  DateTime  @default(now())\n  approvedAt DateTime?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"deposits\")\n}\n\nmodel Withdrawal {\n  id            String    @id @default(cuid())\n  userId        String\n  amount        Float\n  bankName      String\n  accountNumber String\n  ifscCode      String\n  accountHolder String\n  status        String    @default(\"pending\")\n  createdAt     DateTime  @default(now())\n  processedAt   DateTime?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"withdrawals\")\n}\n\nmodel Ticket {\n  id        String   @id @default(cuid())\n  userId    String\n  category  String\n  subject   String\n  message   String\n  status    String   @default(\"open\")\n  priority  String   @default(\"medium\")\n  responses Json?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"tickets\")\n}\n\nmodel AdminSettings {\n  id             String   @id @default(cuid())\n  defaultPayout  Float    @default(85)\n  maxTradeAmount Float    @default(10000)\n  minTradeAmount Float    @default(10)\n  minDeposit     Float    @default(2720)\n  minWithdrawal  Float    @default(5700)\n  serverStatus   String   @default(\"online\")\n  tradeMode      String   @default(\"normal\")\n  qrCode         String?\n  updatedAt      DateTime @updatedAt\n\n  @@map(\"admin_settings\")\n}\n",
  "inlineSchemaHash": "420df17aa6a4d5a4436bb3b4fb1879961fe55c741fc20f83ed56746b9d34d3e2",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"demoBalance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"realBalance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalDeposits\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalWithdrawals\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalTrades\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalWins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalLosses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentAccount\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trades\",\"kind\":\"object\",\"type\":\"Trade\",\"relationName\":\"TradeToUser\"},{\"name\":\"deposits\",\"kind\":\"object\",\"type\":\"Deposit\",\"relationName\":\"DepositToUser\"},{\"name\":\"withdrawals\",\"kind\":\"object\",\"type\":\"Withdrawal\",\"relationName\":\"UserToWithdrawal\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToUser\"}],\"dbName\":\"users\"},\"Trade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"asset\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"direction\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"endPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"result\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payout\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"accountType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TradeToUser\"}],\"dbName\":\"trades\"},\"Deposit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"utr\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"approvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DepositToUser\"}],\"dbName\":\"deposits\"},\"Withdrawal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"bankName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ifscCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountHolder\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWithdrawal\"}],\"dbName\":\"withdrawals\"},\"Ticket\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priority\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"responses\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TicketToUser\"}],\"dbName\":\"tickets\"},\"AdminSettings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"defaultPayout\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"maxTradeAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"minTradeAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"minDeposit\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"minWithdrawal\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"serverStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tradeMode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"qrCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"admin_settings\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {}
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

