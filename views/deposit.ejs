<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Deposit - TrustX</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0d1421 0%, #1a1d29 100%);
            color: white;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: #1e2329;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 0 15px rgba(240, 185, 11, 0.5);
        }
        h1 {
            color: #f0b90b;
            text-align: center;
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #ccc;
        }
        input {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: none;
            font-size: 16px;
            margin-bottom: 15px;
            background: #2b2f36;
            color: white;
        }
        button {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #f0b90b, #e6a800);
            border: none;
            border-radius: 10px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            color: #000;
            transition: background 0.3s ease;
            margin-bottom: 10px;
        }
        button:hover {
            background: linear-gradient(135deg, #e6a800, #f0b90b);
        }
        #userIdDisplay {
            text-align: center;
            margin-bottom: 20px;
            font-weight: 600;
            color: #f0b90b;
        }
        .qr-section {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: #2b2f36;
            border-radius: 10px;
        }
        .qr-code {
            max-width: 200px;
            width: 100%;
            border-radius: 10px;
            margin: 10px 0;
        }
        .step {
            display: none;
        }
        .step.active {
            display: block;
        }
        .step-indicator {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }
        .step-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #3c4043;
            margin: 0 5px;
        }
        .step-dot.active {
            background: #f0b90b;
        }
        .amount-display {
            font-size: 24px;
            font-weight: bold;
            color: #f0b90b;
            text-align: center;
            margin: 10px 0;
        }
        .instruction {
            background: #2b2f36;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid #f0b90b;
        }
        .balance-display {
            margin-top: 20px;
            padding: 15px;
            background: #2b2f36;
            border-radius: 8px;
            text-align: center;
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            z-index: 1001;
            max-width: 300px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }
        .notification.success {
            background: linear-gradient(135deg, #00ff88, #00cc6a);
        }
        .notification.error {
            background: linear-gradient(135deg, #ff4444, #cc3333);
        }
        .notification.info {
            background: linear-gradient(135deg, #00d4ff, #5200ff);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ’° Deposit Funds</h1>
        <div id="userIdDisplay">Loading User ID...</div>
        
        <div class="step-indicator">
            <div class="step-dot active" id="dot1"></div>
            <div class="step-dot" id="dot2"></div>
            <div class="step-dot" id="dot3"></div>
        </div>

        <!-- Step 1: Enter Amount -->
        <div class="step active" id="step1">
            <label for="depositAmount">Deposit Amount (â‚¹)</label>
            <input type="number" id="depositAmount" min="100" placeholder="Minimum â‚¹100" />
            <button id="proceedBtn">Proceed to Payment</button>
        </div>

        <!-- Step 2: QR Code Payment -->
        <div class="step" id="step2">
            <div class="amount-display">Amount: â‚¹<span id="displayAmount">0</span></div>
            <div class="qr-section">
                <h3>Scan QR Code to Pay</h3>
                <img id="qrCode" class="qr-code" src="" alt="QR Code" style="display: none;" />
                <div class="instruction">
                    ðŸ“± Scan this QR code with any UPI app (PhonePe, Paytm, GPay, etc.) and make the payment
                </div>
            </div>
            <button id="paymentDoneBtn">Payment Done</button>
        </div>

        <!-- Step 3: UTR Verification -->
        <div class="step" id="step3">
            <div class="amount-display">Amount: â‚¹<span id="displayAmount2">0</span></div>
            <div class="instruction">
                âœ… Payment completed! Please enter your UTR/Transaction ID below:
            </div>
            <label for="utrInput">UTR/Transaction ID</label>
            <input type="text" id="utrInput" placeholder="Enter 12-digit UTR number" />
            <button id="submitUtrBtn">Submit for Approval</button>
            <button id="backToQrBtn" style="background: #666;">Back to QR Code</button>
        </div>

        <!-- Balance Display -->
        <div class="balance-display">
            <div style="margin-bottom: 10px;">Current Balance:</div>
            <div style="font-size: 20px; font-weight: bold; color: #f0b90b;">
                Real: â‚¹<span id="realBalance">0</span> | Demo: â‚¹<span id="demoBalance">50000</span>
            </div>
            <button id="refreshBalanceBtn" style="margin-top: 10px; padding: 8px 16px; font-size: 14px;">Refresh Balance</button>
        </div>
    </div>

    <script>
        let currentStep = 1;
        let depositAmount = 0;
        let userId = '';
        let balanceCheckInterval;

        document.addEventListener('DOMContentLoaded', () => {
            userId = localStorage.getItem('tradepro_user_id') || localStorage.getItem('tradepro_username');
            const userIdDisplay = document.getElementById('userIdDisplay');
            if (!userId) {
                userIdDisplay.textContent = 'User not logged in. Please login first.';
                document.getElementById('proceedBtn').disabled = true;
                return;
            }
            userIdDisplay.textContent = `User ID: ${userId}`;
            loadQRCode();
            loadUserBalance();
            startBalanceMonitoring();
        });

        async function loadQRCode() {
            try {
                const response = await fetch('/api/qr-code');
                const data = await response.json();
                
                if (data.success && data.qrCode) {
                    const qrImg = document.getElementById('qrCode');
                    qrImg.src = data.qrCode;
                    qrImg.style.display = 'block';
                } else {
                    showQRError('QR Code not available. Please contact admin.');
                }
            } catch (error) {
                showQRError('Failed to load QR code. Please try again.');
            }
        }

        function showQRError(message) {
            document.getElementById('qrCode').style.display = 'none';
            document.querySelector('.qr-section h3').textContent = message;
            document.querySelector('.qr-section h3').style.color = '#ff6b6b';
        }

        function showStep(step) {
            document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
            document.querySelectorAll('.step-dot').forEach(d => d.classList.remove('active'));
            
            document.getElementById(`step${step}`).classList.add('active');
            document.getElementById(`dot${step}`).classList.add('active');
            currentStep = step;
        }

        document.getElementById('proceedBtn').addEventListener('click', () => {
            const amount = parseInt(document.getElementById('depositAmount').value);
            if (!amount || amount < 100) {
                showNotification('Please enter a valid amount (minimum â‚¹100)', 'error');
                return;
            }
            depositAmount = amount;
            document.getElementById('displayAmount').textContent = amount;
            document.getElementById('displayAmount2').textContent = amount;
            loadQRCode();
            showStep(2);
        });

        document.getElementById('paymentDoneBtn').addEventListener('click', () => {
            showStep(3);
        });

        document.getElementById('backToQrBtn').addEventListener('click', () => {
            showStep(2);
        });

        document.getElementById('submitUtrBtn').addEventListener('click', async () => {
            const utr = document.getElementById('utrInput').value.trim();
            if (!utr) {
                showNotification('Please enter UTR/Transaction ID', 'error');
                return;
            }

            try {
                const response = await fetch('/api/deposit-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        userId: userId,
                        amount: depositAmount,
                        utr: utr
                    })
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Deposit request submitted! Waiting for admin approval...', 'success');
                    document.getElementById('depositAmount').value = '';
                    document.getElementById('utrInput').value = '';
                    showStep(1);
                    startBalanceMonitoring();
                } else {
                    showNotification(data.message || 'Failed to submit deposit request', 'error');
                }
            } catch (error) {
                showNotification('Error submitting deposit request. Please try again.', 'error');
            }
        });

        async function loadUserBalance() {
            try {
                const response = await fetch(`/api/balance/${userId}`);
                const data = await response.json();
                
                if (data.success) {
                    const oldBalance = parseInt(document.getElementById('realBalance').textContent.replace(/,/g, '')) || 0;
                    const newBalance = data.realBalance || 0;
                    
                    document.getElementById('realBalance').textContent = newBalance.toLocaleString();
                    document.getElementById('demoBalance').textContent = (data.demoBalance || 50000).toLocaleString();
                    
                    if (newBalance > oldBalance && oldBalance >= 0) {
                        const addedAmount = newBalance - oldBalance;
                        if (addedAmount > 0) {
                            showNotification(`ðŸŽ‰ Deposit Approved! â‚¹${addedAmount.toLocaleString()} added to your balance!`, 'success');
                        }
                    }
                }
            } catch (error) {
                console.error('Failed to load balance:', error);
            }
        }

        function startBalanceMonitoring() {
            if (balanceCheckInterval) clearInterval(balanceCheckInterval);
            balanceCheckInterval = setInterval(loadUserBalance, 2000);
        }

        document.getElementById('refreshBalanceBtn').addEventListener('click', loadUserBalance);

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }
    </script>
</body>
</html>