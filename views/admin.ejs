<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - TrustX Trading</title>
    <link rel="stylesheet" href="/css/admin.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #0d1421 0%, #1a1f2e 100%);
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .admin-header {
            background: linear-gradient(135deg, #1e2329 0%, #2b3139 100%);
            padding: 20px 40px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .admin-header h1 {
            font-size: 28px;
            background: linear-gradient(135deg, #f0b90b, #ff9500);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .admin-nav {
            display: flex;
            gap: 10px;
        }

        .logout-btn {
            background: linear-gradient(135deg, #f84960, #d63447);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: transform 0.2s;
        }

        .logout-btn:hover {
            transform: scale(1.05);
        }

        .container {
            max-width: 1400px;
            margin: 30px auto;
            padding: 0 20px;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .tab {
            background: #1e2329;
            color: #ffffff;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            font-size: 14px;
            transition: all 0.3s;
        }

        .tab:hover {
            background: #2b3139;
        }

        .tab.active {
            background: linear-gradient(135deg, #f0b90b, #ff9500);
            color: #000;
        }

        .tab-content {
            display: none;
            background: #1e2329;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #2b3139 0%, #1e2329 100%);
            padding: 25px;
            border-radius: 12px;
            border: 1px solid #3c4043;
        }

        .stat-card h3 {
            color: #8c8c8c;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .stat-card .value {
            font-size: 32px;
            font-weight: bold;
            background: linear-gradient(135deg, #f0b90b, #ff9500);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #3c4043;
        }

        th {
            background: #2b3139;
            font-weight: bold;
            color: #f0b90b;
        }

        tr:hover {
            background: #2b3139;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
            margin-right: 5px;
        }

        .btn-success {
            background: linear-gradient(135deg, #02c076, #00a85a);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, #f84960, #d63447);
            color: white;
        }

        .btn-primary {
            background: linear-gradient(135deg, #f0b90b, #ff9500);
            color: black;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #f0b90b;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px;
            background: #2b3139;
            border: 1px solid #3c4043;
            border-radius: 8px;
            color: white;
            font-size: 14px;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #f0b90b;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: bold;
            z-index: 1000;
            animation: slideIn 0.3s;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        @keyframes slideIn {
            from { transform: translateX(400px); }
            to { transform: translateX(0); }
        }

        .notification.success {
            background: linear-gradient(135deg, #02c076, #00a85a);
        }

        .notification.error {
            background: linear-gradient(135deg, #f84960, #d63447);
        }

        .notification.info {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-active {
            background: #02c076;
            color: white;
        }

        .status-inactive {
            background: #f84960;
            color: white;
        }

        .status-pending {
            background: #ff9500;
            color: black;
        }

        .withdrawal-card {
            background: #2b3139;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
            border: 1px solid #3c4043;
        }

        .withdrawal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .withdrawal-amount {
            font-size: 24px;
            font-weight: bold;
            color: #f0b90b;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #8c8c8c;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #8c8c8c;
        }

        .empty-state svg {
            width: 100px;
            height: 100px;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .refresh-btn {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            margin-top: 20px;
        }

        .refresh-btn:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="admin-header">
        <h1>üõ°Ô∏è Admin Control Panel</h1>
        <div class="admin-nav">
            <button class="logout-btn" onclick="logout()">üö™ Logout</button>
        </div>
    </div>

    <div class="container">
        <div class="tabs">
            <button class="tab active" onclick="switchTab('dashboard')">üìä Dashboard</button>
            <button class="tab" onclick="switchTab('users')">üë• Users</button>
            <button class="tab" onclick="switchTab('qr-upload')">üì± QR Upload</button>
            <button class="tab" onclick="switchTab('deposit-requests')">üí∞ Deposit Requests</button>
            <button class="tab" onclick="switchTab('deposit')">üí∞ Admin Deposit</button>
            <button class="tab" onclick="switchTab('withdrawals')">üí∏ Withdrawals</button>
            <button class="tab" onclick="switchTab('settings')">‚öôÔ∏è Settings</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <h2 style="margin-bottom: 20px;">üìä System Overview</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>Total Users</h3>
                    <div class="value" id="totalUsers">0</div>
                </div>
                <div class="stat-card">
                    <h3>Online Users</h3>
                    <div class="value" id="onlineUsers">0</div>
                </div>
                <div class="stat-card">
                    <h3>Active Trades</h3>
                    <div class="value" id="activeTrades">0</div>
                </div>
                <div class="stat-card">
                    <h3>Total Volume</h3>
                    <div class="value">‚Çπ<span id="totalVolume">0</span></div>
                </div>
                <div class="stat-card">
                    <h3>Server Revenue</h3>
                    <div class="value">‚Çπ<span id="serverRevenue">0</span></div>
                </div>
                <div class="stat-card">
                    <h3>Win Rate</h3>
                    <div class="value"><span id="winRate">50</span>%</div>
                </div>
            </div>
            <button class="refresh-btn" onclick="loadStats()">üîÑ Refresh Stats</button>
        </div>

        <!-- Users Tab -->
        <div id="users" class="tab-content">
            <h2 style="margin-bottom: 20px;">üë• User Management</h2>
            <div id="usersTable">
                <div class="loading">Loading users...</div>
            </div>
        </div>

        <!-- QR Upload Tab -->
        <div id="qr-upload" class="tab-content">
            <h2 style="margin-bottom: 20px;">üì± QR Code Upload</h2>
            <div style="max-width: 500px;">
                <div class="form-group">
                    <label for="qrFile">Upload QR Code Image</label>
                    <input type="file" id="qrFile" accept="image/*" style="background: #2b3139; border: 2px dashed #f0b90b; padding: 20px; text-align: center;">
                </div>
                <div id="qrPreview" style="text-align: center; margin: 20px 0;"></div>
                <button class="btn btn-primary" onclick="uploadQR()">üíæ Upload QR Code</button>
                <div id="currentQR" style="margin-top: 30px; text-align: center;">
                    <h3>Current QR Code:</h3>
                    <img id="currentQRImage" style="max-width: 200px; border-radius: 10px; margin-top: 10px;" />
                </div>
            </div>
        </div>

        <!-- Deposit Requests Tab -->
        <div id="deposit-requests" class="tab-content">
            <h2 style="margin-bottom: 20px;">üí∞ Deposit Requests</h2>
            <div id="depositRequestsList">
                <div class="loading">Loading deposit requests...</div>
            </div>
            <button class="refresh-btn" onclick="loadDepositRequests()">üîÑ Refresh</button>
        </div>

        <!-- Admin Deposit Tab -->
        <div id="deposit" class="tab-content">
            <h2 style="margin-bottom: 20px;">üí∞ Admin Deposit</h2>
            <div style="max-width: 500px;">
                <div class="form-group">
                    <label for="depositUserId">User ID</label>
                    <input type="text" id="depositUserId" placeholder="Enter User ID">
                </div>
                <div class="form-group">
                    <label for="depositAmount">Amount (‚Çπ)</label>
                    <input type="number" id="depositAmount" placeholder="Enter amount" min="1">
                </div>
                <button class="btn btn-primary" onclick="submitAdminDeposit()">üí∞ Deposit Funds</button>
            </div>
        </div>

        <!-- Withdrawals Tab -->
        <div id="withdrawals" class="tab-content">
            <h2 style="margin-bottom: 20px;">üí∏ Withdrawal Requests</h2>
            <div id="withdrawalsList">
                <div class="loading">Loading withdrawals...</div>
            </div>
            <button class="refresh-btn" onclick="loadWithdrawals()">üîÑ Refresh</button>
        </div>

        <!-- Settings Tab -->
        <div id="settings" class="tab-content">
            <h2 style="margin-bottom: 20px;">‚öôÔ∏è System Settings</h2>
            <div style="max-width: 600px;">
                <div class="form-group">
                    <label>Maintenance Mode</label>
                    <select id="maintenanceMode">
                        <option value="off">Off</option>
                        <option value="on">On</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Always Loss Mode (Force all trades to lose)</label>
                    <select id="alwaysLossMode">
                        <option value="off">Off</option>
                        <option value="on">On</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Trading Status</label>
                    <select id="tradingStatus">
                        <option value="enabled">Enabled</option>
                        <option value="disabled">Disabled</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Max Trade Amount (‚Çπ)</label>
                    <input type="number" id="maxTradeAmount" value="10000">
                </div>
                <div class="form-group">
                    <label>Min Trade Amount (‚Çπ)</label>
                    <input type="number" id="minTradeAmount" value="100">
                </div>
                <button class="btn btn-primary" onclick="saveSettings()">üíæ Save Settings</button>
            </div>
        </div>
    </div>

    <script>
        // Check authentication
        if (localStorage.getItem('admin_authenticated') !== 'true') {
            window.location.href = '/admin-login';
        }

        // Tab switching
        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(tabName).classList.add('active');
            
            // Load data when switching tabs
            if (tabName === 'users') loadUsers();
            if (tabName === 'withdrawals') loadWithdrawals();
            if (tabName === 'dashboard') loadStats();
            if (tabName === 'qr-upload') loadCurrentQR();
            if (tabName === 'deposit-requests') loadDepositRequests();
            if (tabName === 'settings') loadSettings();
        }

        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'slideIn 0.3s reverse';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Load stats
        async function loadStats() {
            try {
                const response = await fetch('/api/admin/stats');
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('totalUsers').textContent = data.stats.totalUsers;
                    document.getElementById('onlineUsers').textContent = data.stats.onlineUsers;
                    document.getElementById('activeTrades').textContent = data.stats.activeTrades;
                    document.getElementById('totalVolume').textContent = data.stats.totalVolume.toLocaleString();
                    document.getElementById('serverRevenue').textContent = data.stats.serverRevenue.toLocaleString();
                    document.getElementById('winRate').textContent = data.stats.winRate;
                }
            } catch (error) {
                showNotification('Failed to load stats', 'error');
            }
        }

        // Load users
        async function loadUsers() {
            const container = document.getElementById('usersTable');
            container.innerHTML = '<div class="loading">Loading users...</div>';
            
            try {
                const response = await fetch('/api/admin/users');
                const data = await response.json();
                
                if (data.success) {
                    const users = Object.values(data.users);
                    
                    if (users.length === 0) {
                        container.innerHTML = '<div class="empty-state">No users found</div>';
                        return;
                    }
                    
                    let html = `
                        <table>
                            <thead>
                                <tr>
                                    <th>User ID</th>
                                    <th>Demo Balance</th>
                                    <th>Real Balance</th>
                                    <th>Total Trades</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;
                    
                    users.forEach(user => {
                        const status = user.status || 'active';
                        html += `
                            <tr>
                                <td>${user.id.substring(0, 20)}...</td>
                                <td>‚Çπ${user.accounts.demo.balance.toLocaleString()}</td>
                                <td>‚Çπ${user.accounts.real.balance.toLocaleString()}</td>
                                <td>${(user.accounts.demo.totalTrades || 0) + (user.accounts.real.totalTrades || 0)}</td>
                                <td><span class="status-badge status-${status}">${status.toUpperCase()}</span></td>
                                <td>
                                    ${status === 'active' ? 
                                        `<button class="btn btn-danger" onclick="toggleUserStatus('${user.id}', 'deactivate')">Deactivate</button>` :
                                        `<button class="btn btn-success" onclick="toggleUserStatus('${user.id}', 'activate')">Activate</button>`
                                    }
                                </td>
                            </tr>
                        `;
                    });
                    
                    html += '</tbody></table>';
                    container.innerHTML = html;
                }
            } catch (error) {
                container.innerHTML = '<div class="empty-state">Failed to load users</div>';
                showNotification('Failed to load users', 'error');
            }
        }

        // Toggle user status
        async function toggleUserStatus(userId, action) {
            try {
                const response = await fetch(`/api/admin/users/${userId}/${action}`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    loadUsers();
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to update user status', 'error');
            }
        }

        // Submit admin deposit
        async function submitAdminDeposit() {
            const userId = document.getElementById('depositUserId').value.trim();
            const amount = document.getElementById('depositAmount').value;
            
            if (!userId || !amount) {
                showNotification('Please fill all fields', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/admin/deposit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, amount: parseFloat(amount) })
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    document.getElementById('depositUserId').value = '';
                    document.getElementById('depositAmount').value = '';
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to process deposit', 'error');
            }
        }

        // Load withdrawals
        async function loadWithdrawals() {
            const container = document.getElementById('withdrawalsList');
            container.innerHTML = '<div class="loading">Loading withdrawals...</div>';
            
            try {
                const response = await fetch('/api/admin/withdrawals');
                const data = await response.json();
                
                if (data.success) {
                    const withdrawals = data.withdrawals;
                    
                    if (withdrawals.length === 0) {
                        container.innerHTML = '<div class="empty-state">No withdrawal requests</div>';
                        return;
                    }
                    
                    let html = '';
                    withdrawals.forEach(withdrawal => {
                        html += `
                            <div class="withdrawal-card">
                                <div class="withdrawal-header">
                                    <div class="withdrawal-amount">‚Çπ${withdrawal.amount.toLocaleString()}</div>
                                    <span class="status-badge status-${withdrawal.status}">${withdrawal.status.toUpperCase()}</span>
                                </div>
                                <p><strong>User ID:</strong> ${withdrawal.userId}</p>
                                <p><strong>Requested:</strong> ${new Date(withdrawal.timestamp).toLocaleString()}</p>
                                ${withdrawal.bankDetails ? `
                                    <p><strong>Bank:</strong> ${withdrawal.bankDetails.bankName}</p>
                                    <p><strong>Account:</strong> ${withdrawal.bankDetails.accountNumber}</p>
                                    <p><strong>IFSC:</strong> ${withdrawal.bankDetails.ifscCode}</p>
                                ` : ''}
                                ${withdrawal.status === 'pending' ? `
                                    <div style="margin-top: 15px;">
                                        <button class="btn btn-success" onclick="approveWithdrawal('${withdrawal.id}')">‚úì Approve</button>
                                        <button class="btn btn-danger" onclick="rejectWithdrawal('${withdrawal.id}')">‚úó Reject</button>
                                    </div>
                                ` : ''}
                            </div>
                        `;
                    });
                    
                    container.innerHTML = html;
                }
            } catch (error) {
                container.innerHTML = '<div class="empty-state">Failed to load withdrawals</div>';
                showNotification('Failed to load withdrawals', 'error');
            }
        }

        // Approve withdrawal
        async function approveWithdrawal(id) {
            try {
                const response = await fetch(`/api/admin/withdrawals/${id}/approve`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    loadWithdrawals();
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to approve withdrawal', 'error');
            }
        }

        // Reject withdrawal
        async function rejectWithdrawal(id) {
            try {
                const response = await fetch(`/api/admin/withdrawals/${id}/reject`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    loadWithdrawals();
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to reject withdrawal', 'error');
            }
        }

        // Save settings
        async function saveSettings() {
            const maintenanceMode = document.getElementById('maintenanceMode').value;
            const alwaysLossMode = document.getElementById('alwaysLossMode').value;
            
            try {
                // Save maintenance mode
                const maintenanceResponse = await fetch('/api/admin/maintenance', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ maintenanceMode })
                });
                
                // Save always loss mode
                const alwaysLossResponse = await fetch('/api/admin/always-loss', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ alwaysLoss: alwaysLossMode })
                });
                
                const maintenanceData = await maintenanceResponse.json();
                const alwaysLossData = await alwaysLossResponse.json();
                
                if (maintenanceData.success && alwaysLossData.success) {
                    showNotification('Settings saved successfully', 'success');
                } else {
                    showNotification('Failed to save some settings', 'error');
                }
            } catch (error) {
                showNotification('Failed to save settings', 'error');
            }
        }
        
        // Load current settings
        async function loadSettings() {
            try {
                // Load maintenance mode
                const maintenanceResponse = await fetch('/api/admin/maintenance');
                const maintenanceData = await maintenanceResponse.json();
                if (maintenanceData.success) {
                    document.getElementById('maintenanceMode').value = maintenanceData.maintenanceMode;
                }
                
                // Load always loss mode
                const alwaysLossResponse = await fetch('/api/admin/always-loss');
                const alwaysLossData = await alwaysLossResponse.json();
                if (alwaysLossData.success) {
                    document.getElementById('alwaysLossMode').value = alwaysLossData.alwaysLoss;
                }
            } catch (error) {
                console.error('Failed to load settings');
            }
        }

        // Logout
        function logout() {
            localStorage.removeItem('admin_authenticated');
            localStorage.removeItem('admin_username');
            window.location.href = '/admin-login';
        }

        // QR Code functions
        async function loadCurrentQR() {
            try {
                const response = await fetch('/api/admin/qr-code');
                const data = await response.json();
                if (data.success && data.qrCode) {
                    document.getElementById('currentQRImage').src = data.qrCode;
                    document.getElementById('currentQRImage').style.display = 'block';
                } else {
                    document.getElementById('currentQRImage').style.display = 'none';
                }
            } catch (error) {
                console.error('Failed to load current QR');
            }
        }

        // QR file preview
        document.getElementById('qrFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('qrPreview').innerHTML = 
                        `<img src="${e.target.result}" style="max-width: 200px; border-radius: 10px;" />`;
                };
                reader.readAsDataURL(file);
            }
        });

        // Upload QR
        async function uploadQR() {
            const fileInput = document.getElementById('qrFile');
            const file = fileInput.files[0];
            
            if (!file) {
                showNotification('Please select a QR code image', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('qrCode', file);

            try {
                const response = await fetch('/api/admin/upload-qr', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification('QR code uploaded successfully', 'success');
                    loadCurrentQR();
                    fileInput.value = '';
                    document.getElementById('qrPreview').innerHTML = '';
                } else {
                    showNotification(data.message || 'Failed to upload QR code', 'error');
                }
            } catch (error) {
                showNotification('Error uploading QR code', 'error');
            }
        }

        // Load deposit requests
        async function loadDepositRequests() {
            const container = document.getElementById('depositRequestsList');
            container.innerHTML = '<div class="loading">Loading deposit requests...</div>';
            
            try {
                const response = await fetch('/api/admin/deposit-requests');
                const data = await response.json();
                
                if (data.success) {
                    const requests = data.requests;
                    
                    if (requests.length === 0) {
                        container.innerHTML = '<div class="empty-state">No deposit requests</div>';
                        return;
                    }
                    
                    let html = '';
                    requests.forEach(request => {
                        html += `
                            <div class="withdrawal-card">
                                <div class="withdrawal-header">
                                    <div class="withdrawal-amount">‚Çπ${request.amount.toLocaleString()}</div>
                                    <span class="status-badge status-${request.status}">${request.status.toUpperCase()}</span>
                                </div>
                                <p><strong>User ID:</strong> ${request.userId}</p>
                                <p><strong>UTR:</strong> ${request.utr}</p>
                                <p><strong>Requested:</strong> ${new Date(request.timestamp).toLocaleString()}</p>
                                ${request.status === 'pending' ? `
                                    <div style="margin-top: 15px;">
                                        <button class="btn btn-success" onclick="approveDeposit('${request.id}')">‚úì Approve</button>
                                        <button class="btn btn-danger" onclick="rejectDeposit('${request.id}')">‚úó Reject</button>
                                    </div>
                                ` : ''}
                            </div>
                        `;
                    });
                    
                    container.innerHTML = html;
                }
            } catch (error) {
                container.innerHTML = '<div class="empty-state">Failed to load deposit requests</div>';
                showNotification('Failed to load deposit requests', 'error');
            }
        }

        // Approve deposit
        async function approveDeposit(id) {
            try {
                const response = await fetch(`/api/admin/deposit-requests/${id}/approve`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification('‚úÖ ' + data.message, 'success');
                    loadDepositRequests();
                    loadStats(); // Refresh stats after approval
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to approve deposit', 'error');
            }
        }

        // Reject deposit
        async function rejectDeposit(id) {
            try {
                const response = await fetch(`/api/admin/deposit-requests/${id}/reject`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    loadDepositRequests();
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to reject deposit', 'error');
            }
        }

        // Load initial data
        loadStats();
        loadCurrentQR();
        loadSettings();
        
        // Auto-refresh stats every 10 seconds
        setInterval(loadStats, 10000);
    </script>
</body>
</html>
